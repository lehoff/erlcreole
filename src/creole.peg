% Source:
%///////////////////////////////////////////////////////////////////////////////
%///////  Copyright (c) 2007 Martin Junghans, Dirk Riehle, SAP Labs LLC  ///////
%///////  Taken from: Martin Junghans, Dirk Riehle, Rama Gurram,         ///////
%///////  Matthias Kaiser, Mario Lopes, and Umit Yalcinalp. An EBNF      ///////
%///////  grammar for Wiki Creole 1.0. In ACM SIGWEB Newsletter, Volume  ///////
%///////  2007, Issue Winter (Winter 2007), Article No. 4.               ///////
%///////////////////////////////////////////////////////////////////////////////



%grammar creole10;

%///////////////////////////////////////////////////////////////////////////////
%///////////////////////   P A R S E R     R U L E S  //////////////////////////
%///////////////////////////////////////////////////////////////////////////////

wikipage <-	
	 whitespaces?  pars:paragraphs eof:EOF ;

paragraphs
	<-	paragraph* ;

paragraph
	<-	
	nowiki_block:nowiki_block
	/	blanks  paragraph_separator
	/	( blanks )?
			content:(	heading
			% should not be necessary to do a &(DASH*4) look-ahead here:
		    /   horizontalrule
			/	list_unord
			/	list_ord
			/	table
			/	text_paragraph
			)  
		( paragraph_separator )? ;




%//////////////////////   T E X T  P A R A G R A P H   ////////////////////////

%text_paragraph
%	<-	(	text_line
%		/ 	( NOWIKI_OPEN  !( NEWLINE ) )  =>  
%			nowiki_inline  ( text_element )*  text_lineseparator
%		)+ ;

% todo: validate homebrew.
% homebrew
text_paragraph
	<-	(	
           &(NOWIKI_OPEN !NEWLINE) nowiki_inline?  ( text_element )*  text_lineseparator
		/  text_line 	
		)+ 
	 ;

% HOMEBREW
% This is mainly for detecting when to stop a text paragraph and not
% intended to capture anything, i.e., look ahead only.
text_paragraph_end 
	<- EOF
	/  NEWLINE ( horizontalrule
			   / blanks* NEWLINE
			   / list_ordelem_markup) ;  

text_line
	<-	text_firstelement  rest:(( text_element )*)  text_lineseparator ;

%text_firstelement
%	<-	 { input.LA(1) != STAR || (input.LA(1) == STAR && input.LA(2) == STAR) }?
%		text_formattedelement
%	/	text_first_unformattedelement ;

% homebrew
text_firstelement
	<-	&(!STAR / &(STAR STAR)) text_formattedelement
	/	text_first_unformattedelement ;


text_formattedelement
	<-	ital_markup  text_italcontent  ( newlines:( NEWLINE )?  ital_markup )?
	/	bold_markup  text_boldcontent  ( newlines:( NEWLINE )?  bold_markup )? ;

text_boldcontent
	<-	( NEWLINE )?  (( text_boldcontentpart )*)
	/	eof:EOF ;

text_element
	<-	unformatted:(onestar  text_unformattedelement)
	/	unformatted:(text_unformattedelement  onestar)
	/	text_formattedelement ;

text_italcontent
	<-	( NEWLINE )?  (( text_italcontentpart )*)
	/	eof:EOF ;

text_boldcontentpart
	<-	markup:ital_markup  text_bolditalcontent  ( ital_markup )?
	/	text_formattedcontent ;

text_italcontentpart
	<-	markup:bold_markup  text_bolditalcontent  ( bold_markup )?
	/	text_formattedcontent ;

text_bolditalcontent
	<-	( NEWLINE )?  ( text_formattedcontent )?
	/	EOF ;

% homebrew
text_formattedcontent
	<-	onestar  ( (text_linebreak / text_unformattedelement) 
		 onestar  ( text_linebreak )? )+ ;

%% todo: IS THIS RIGHT?
%% Note: LA(n) in the original ebnf grammar //possibly// looks at tokens,
%%       not individual characters 
text_linebreak
	<-
%	!( . (DASH / POUND / EQUAL / NEWLINE ) )
%	!( NEWLINE (DASH / POUND / EQUAL / NEWLINE ) )
	!text_paragraph_end 
	text_lineseparator ;

% had to put nowiki_inline first due to the greedy approach of peg.
text_inlineelement
	<- nowiki_inline 
	/  text_first_inlineelement;

text_first_inlineelement 
	<-	link
	/	image
	/	extension ;

text_first_unformattedelement
	<-	unformatted:text_first_unformatted
	/	inline:text_first_inlineelement ;

text_first_unformatted
	<-	( (!(	POUND
			/	STAR
			/	EQUAL
			/	PIPE
			/	ITAL
			/	LINK_OPEN
			/   link_free
			/	IMAGE_OPEN 
			/	NOWIKI_OPEN
			/	EXTENSION
			/	FORCED_LINEBREAK
			/	ESCAPE
			/	NEWLINE
			/	EOF 
			)
			.
		  )
		/	forced_linebreak 
		/	escaped )+ ;

text_unformattedelement
	<-	unformatted:text_unformatted
	/	inline:text_inlineelement ;

text_unformatted
	<-	( (!(	ITAL
			/	STAR
			/	LINK_OPEN
			/   link_free
			/	IMAGE_OPEN
			/	NOWIKI_OPEN
			/	EXTENSION
			/	FORCED_LINEBREAK
			/	ESCAPE
			/	NEWLINE
			/	EOF 
			)
			.
		  )
		/	forced_linebreak 
		/	escaped )+ ;




%/////////////////////////////   H E A D I N G   //////////////////////////////

heading
	<-	heading_markup  content:heading_content  ( heading_markup )?  ( blanks )?
		paragraph_separator ;

heading_content
	<-	nested:(heading_markup  content:heading_content  ( heading_markup )?)
	/	content:(( (!( EQUAL / ESCAPE / NEWLINE / EOF ) .) / escaped )+) ;




%////////////////////////////////   L I S T   /////////////////////////////////

list_ord
	<-	elements:(( list_ordelem )+)  ( end_of_list )? ;

list_ordelem
	<-	blanks? list_ordelem_markup  list_elem ;

list_unord
	<-	elements:(( list_unordelem )+)  ( end_of_list )? ;

list_unordelem
	<-	blanks? list_unordelem_markup  list_elem ;

list_elem
	<-	markup:(( list_elem_markup )*)  blanks? content:list_elemcontent  
		list_elemseparator ;

list_elem_markup
	<-	list_ordelem_markup
	/	list_unordelem_markup ;

list_elemcontent
	<-	onestar  ( list_elemcontentpart  onestar )* ;

%% HOMEBREW FIX
list_elemcontentpart
	<-	text_unformattedelement
	/	list_formatted_elem 
	/   list_linebreak;

list_formatted_elem
	<-	bold_markup  content:(onestar  ( list_boldcontentpart  onestar )*)
		( bold_markup )?
	/	ital_markup  content:(onestar  ( list_italcontentpart  onestar )*)
		( ital_markup )? ;

list_boldcontentpart
	<-	markup:ital_markup  list_bolditalcontent  ( ital_markup )?
	/	( text_unformattedelement )+ ;

list_italcontentpart
	<-	markup:bold_markup  list_bolditalcontent  ( bold_markup )?
	/	( text_unformattedelement )+ ;

list_bolditalcontent
	<-	( text_unformattedelement )+ ;

%% HOMEBREW
list_linebreak
      <- newline (blanks)? !( list_elem_markup
                           / newline
                           / heading
                           / table_cell
                           / nowikiblock_open_markup) ;



%///////////////////////////////   T A B L E   ////////////////////////////////

table
	<-	( table_row )+ ;

table_row 
	<-	( table_cell )+  table_rowseparator ;


table_cell
	<- 
	header:(&( . EQUAL) table_headercell)
	/	
	table_normalcell ;

%% HOMEBREW FIX
table_headercell
	<-	table_headercell_markup table_cellcontent 
		(table_headercell_markup / table_cell_markup) blanks? &table_rowseparator
	/   table_headercell_markup table_cellcontent ;
% HOMEBREW FIX
%table_normalcell
%	<-	table_cell_markup  table_cellcontent ;
table_normalcell
	<-	table_cell_markup  table_cellcontent
	    (table_headercell_markup / table_cell_markup) 
	    blanks? &table_rowseparator
	/ table_cell_markup table_cellcontent
	;

table_cellcontent
	<-	blanks? content:(onestar  ( table_cellcontentpart  onestar )*) blanks? ;

table_cellcontentpart
	<-	table_formattedelement
	/	table_unformattedelement ;

table_formattedelement
	<-	ital_markup  ( table_italcontent )?  ( ital_markup )?
	/	bold_markup  ( table_boldcontent )?  ( bold_markup )? ;

table_boldcontent
	<-	content:(onestar  ( table_boldcontentpart  onestar )+) blanks?
	/	EOF ;

table_italcontent
	<-	content:(onestar  ( table_italcontentpart  onestar )+) blanks?
	/	EOF ;

table_boldcontentpart
	<-	table_formattedcontent
	/	ital_markup  table_bolditalcontent  ( ital_markup )? ;

table_italcontentpart
	<-	bold_markup  table_bolditalcontent  ( bold_markup )?
	/	table_formattedcontent ;

table_bolditalcontent
	<-	onestar  ( table_formattedcontent  onestar )?
	/	EOF ;

table_formattedcontent
	<-	( table_unformattedelement )+ ;

table_inlineelement
	<-	link
	/	extension
	/	nowiki_inline 
	/   image;

table_unformattedelement
	<-	table_unformatted
	/	table_inlineelement ;

table_unformatted
	<-	( (!(	PIPE
			/	ITAL
			/	STAR
			/	LINK_OPEN
			/	IMAGE_OPEN
			/	NOWIKI_OPEN
			/	EXTENSION
			/	FORCED_LINEBREAK
			/	ESCAPE
			/	NEWLINE
			/	EOF 
			/   blanks? table_cell_end
			)
			.
		  )
		/	forced_linebreak 
		/	escaped )+ ;


table_cell_end 
	<- (table_headercell_markup / table_cell_markup)
	/  table_rowseparator;

%//////////////////////////////   N O W I K I   ///////////////////////////////

nowiki_block <-	
	nowikiblock_open_markup  content:( !( NOWIKI_BLOCK_CLOSE / EOF ) . )*
		nowikiblock_close_markup  paragraph_separator ;


nowikiblock_open_markup
	<-	nowiki_open_markup  newline ;

nowikiblock_close_markup
	<-	NOWIKI_BLOCK_CLOSE ;

nowiki_inline
	<-	
		nowiki_open_markup  content:(( !( NOWIKI_CLOSE / NEWLINE / EOF ) . )*)
		nowiki_close_markup ;




%/////////////////////   H O R I Z O N T A L   R U L E   //////////////////////

horizontalrule
	<-	horizontalrule_markup  ( blanks )?  paragraph_separator ;




%///////////////////////////////   L I N K   /////////////////////////////////

link
	<-	
		link_free:link_free 
		/
		(link_open_markup  link_address:link_address  ( link_description_markup
		link_description:link_description )?  link_close_markup
		)
		 ;

%% homebrew
link_free <-
       uri_scheme ':' (!uri_end .)+
      ;

%% homebrew
%uri_scheme <-
%       letter ( letter / digits / '+' / '.' / '-'  )+ ;
uri_scheme <-
	"aaa" / "aaas" / "acap" / "cap" / "cid" / "crid" / "data" / "dav" / 
	"dict" / "dns" / "fax" / "file" / "ftp" / "go" / "gopher" / "h323" / 
	"http" / "https" / "iax" / "icap" / "im" / "imap" / "info]" / "ipp" / 
     "iris" / "iris.beep" / "iris.xpc" / "iris.xpcs" / "iris.lwz" / "ldap" / 
     "mailto" / "mid" / "modem" / "msrp" / "msrps" / "mtqp" / 
     "mupdate" / "news" / "nfs" / "nntp" / "opaquelocktoken" / "pop" / 
     "pres" / "rtsp" / "service" / "shttp" / "sip" / "sips" / "snmp" / 
     "soap.beep" / "soap.beeps" / "tag" / "tel" / 
     "telnet" / "tftp" / "tip" / "tv" / "urn" / "vemmi" / 
     "xmlrpc.beep" / "xmlrpc.beeps" / "xmpp" / "z39.50r" / "z39.50s"
	;

%% homebrew
letter <- [a-zA-Z];

%% homebrew
digits <- [0-9]; 

%% homebrew
uri_end <-
     (single_punctuation)? link_end;

%% homebrew
single_punctuation <-
	',' / '.' / '?' / '!' / ':' / ';' / '"' / "'" ;

%% homebrew
link_end 
	<-  BLANKS / NEWLINE / EOF ;

link_address
	<-	link_interwiki_uri  ':'  link_interwiki_pagename
	/	link_uri ;

link_interwiki_uri
	<-	'C' '2'
	/	'D' 'o' 'k' 'u' 'W' 'i' 'k' 'i'
	/	'F' 'l' 'i' 'c' 'k' 'r'
	/	'G' 'o' 'o' 'g' 'l' 'e'
	/	'J' 'S' 'P' 'W' 'i' 'k' 'i'
	/	'M' 'e' 'a' 't' 'b' 'a' 'l' 'l'
	/	'M' 'e' 'd' 'i' 'a' 'W' 'i' 'k' 'i'
	/	'M' 'o' 'i' 'n' 'M' 'o' 'i' 'n'
	/	'O' 'd' 'd' 'm' 'u' 's' 'e'
	/	'O' 'h' 'a' 'n' 'a'
	/	'P' 'm' 'W' 'i' 'k' 'i'
	/	'P' 'u' 'k' 'i' 'W' 'i' 'k' 'i'
	/	'P' 'u' 'r' 'p' 'l' 'e' 'W' 'i' 'k' 'i'
	/	'R' 'a' 'd' 'e' 'o' 'x'
	/	'S' 'n' 'i' 'p' 'S' 'n' 'a' 'p'
	/	'T' 'i' 'd' 'd' 'l' 'y' 'W' 'i' 'k' 'i'
	/	'T' 'W' 'i' 'k' 'i'
	/	'U' 's' 'e' 'm' 'o' 'd'
	/	'W' 'i' 'k' 'i' 'p' 'e' 'd' 'i' 'a'
	/	'X' 'W' 'i' 'k' 'i' ;


link_interwiki_pagename <- (!( PIPE /  LINK_CLOSE / NEWLINE / EOF ) .)+ ;

link_description
	<-	( link_descriptionpart / image )+ ;

link_descriptionpart
	<-	bold_markup  onestar  ( link_bold_descriptionpart  onestar )+  
		bold_markup
	/	ital_markup  onestar  ( link_ital_descriptionpart  onestar )+
		ital_markup
	/	onestar  ( link_descriptiontext  onestar )+ ;

link_bold_descriptionpart
	<-	ital_markup  link_boldital_description  ital_markup
	/	link_descriptiontext ;

link_ital_descriptionpart
	<-	bold_markup  link_boldital_description  bold_markup
	/	link_descriptiontext ;

link_boldital_description
	<-	onestar  ( link_descriptiontext  onestar )+ ;

%% todo: is it smart to restrict newline in a link description?
link_descriptiontext
	<-	( (!(	LINK_CLOSE
			/	ITAL
			/	STAR
			/	LINK_OPEN
			/	IMAGE_OPEN
			/	NOWIKI_OPEN
			/	EXTENSION
			/	FORCED_LINEBREAK
			/	ESCAPE
			/	NEWLINE
			/	EOF 
			)
			.
		  )
		/	forced_linebreak
		/	escaped )+ ;


link_uri <- (!( PIPE / LINK_CLOSE / NEWLINE / EOF ) . )+ ;




%///////////////////////////////   I M A G E   ////////////////////////////////

image
	<-	
		image_open_markup  uri:image_uri  alt:(( image_alternative )?)  
		image_close_markup ;

image_uri <- 	(!( PIPE / IMAGE_CLOSE / NEWLINE / EOF ) . )+ ;

image_alternative
	<-	image_alternative_markup  parts:(( image_alternativepart )+) ;

image_alternativepart
	<-	markup:bold_markup  
		content:(onestar ( image_bold_alternativepart  onestar )+)
		bold_markup
	/	markup:ital_markup  
		content:(onestar  ( image_ital_alternativepart  onestar )+)
		ital_markup
	/	onestar  ( image_alternativetext  onestar )+ ;

image_bold_alternativepart
	<-	markup:ital_markup  content:link_boldital_description  ital_markup
	/	onestar  ( image_alternativetext  onestar )+ ;

image_ital_alternativepart
	<-	markup:bold_markup  content:link_boldital_description  bold_markup
	/	onestar  ( image_alternativetext  onestar )+ ;

% todo: find out why this is never used.
image_boldital_alternative
	<-	onestar  ( image_alternativetext  onestar )+ ;

image_alternativetext
	<-	( (!( 	IMAGE_CLOSE
			/	ITAL
			/	STAR
			/	LINK_OPEN
			/	IMAGE_OPEN
			/	NOWIKI_OPEN
			/	EXTENSION
			/	FORCED_LINEBREAK
			/	NEWLINE
			/	EOF 
			)
			.
		  )
		/	forced_linebreak )+ ;




%////////////////////////////  E X T E N S I O N  /////////////////////////////

extension
	<-	
		extension_markup  extension_handler  blanks  extension_statement
		extension_markup ;

extension_handler
	<-	(!( EXTENSION  /  BLANKS  /  ESCAPE  /  NEWLINE  /  EOF ) . / escaped )+ ;

extension_statement
	<-	(!( EXTENSION  /  ESCAPE  /  EOF ) . / escaped )* ;






onestar <- ( STAR !STAR)?;
 
   

% todo investigate what the . rule means.
%% HOMEBREW
escaped
	<-	ESCAPE  STAR  STAR
 	/	ESCAPE  (!whitespaces .)* ;
		%// '.' in a parser rule means arbitrary token, not character ;
%	/ ESCAPE escaped_token ;

%% HOMEBREW
%escaped_token <-
%             ( !(',' / ';' / ' ' /  '!' 
%                 / newline / EOF) .) * ;



paragraph_separator
	<- 	
		( newline )+
		/	EOF
	;

whitespaces
	<-	 ( blanks / newline )+ ;

blanks
	<-	BLANKS ;

text_lineseparator
	<-	newline  ( blanks )?
	/	EOF ;

newline
	<-	NEWLINE ;

bold_markup
	<-	STAR  STAR ;

ital_markup
	<-	ITAL ;

heading_markup
	<-	EQUAL ;

list_ordelem_markup
	<-	POUND ;

list_unordelem_markup
	<-	STAR ;

list_elemseparator
	<-	newline  ( blanks )?
	/	EOF ;

end_of_list
	<-	newline
	/	EOF ;

table_cell_markup
	<-	PIPE ;

table_headercell_markup
	<-	PIPE  EQUAL ;

table_rowseparator
	<-	newline
	/	EOF ;

nowiki_open_markup
	<-	NOWIKI_OPEN ;

nowiki_close_markup
	<-	NOWIKI_CLOSE ;

horizontalrule_markup
	<-	DASH  DASH  DASH  DASH ;

link_open_markup
	<-	LINK_OPEN ;

link_close_markup
	<-	LINK_CLOSE ;

link_description_markup
	<-	PIPE ;

image_open_markup
	<-	IMAGE_OPEN ;

image_close_markup
	<-	IMAGE_CLOSE ;

image_alternative_markup
	<-	PIPE ;

extension_markup
	<-	EXTENSION ;

forced_linebreak
	<-	FORCED_LINEBREAK ;




%//////////////////////////////////////////////////////////////////////////////
%//////////////////////// S C A N N E R    R U L E S //////////////////////////
%//////////////////////////////////////////////////////////////////////////////

ESCAPE					<- '~';
NOWIKI_BLOCK_CLOSE		<- NEWLINE  '}}}';
NEWLINE	<- ( CR )?  LF / CR;
CR				<- [\r];
LF				<- [\n];

BLANKS					<- ( SPACE / TABULATOR )+;
SPACE			<- ' ';
TABULATOR		<- [\t];

% todo: why is COLON_SLASH not used?
COLON_SLASH				<- ':'  '/';
ITAL					<- '//';
NOWIKI_OPEN				<- '{{{';
NOWIKI_CLOSE			<- '}}}';
LINK_OPEN				<- "[[";
LINK_CLOSE				<- "]]";
IMAGE_OPEN				<- '{{';
IMAGE_CLOSE				<- '}}';
FORCED_LINEBREAK		<- '\\\\';
EQUAL					<- '=';
PIPE					<- '|';
POUND					<- '#';
DASH					<- '-';
STAR					<- '*';
% todo: why is SLASH not used?
SLASH					<- '/';
EXTENSION				<- '@@';

EOF <- 
% 	"papged";
	!. ;
% todo: why is INSIGNIFICANT_CHAR not used?
INSIGNIFICANT_CHAR		<- .;


